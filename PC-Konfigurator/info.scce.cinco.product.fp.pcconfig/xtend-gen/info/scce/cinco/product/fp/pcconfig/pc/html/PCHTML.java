package info.scce.cinco.product.fp.pcconfig.pc.html;

import de.jabc.cinco.meta.core.utils.EclipseFileUtils;
import de.jabc.cinco.meta.plugin.generator.runtime.IGenerator;
import de.jabc.cinco.meta.runtime.CincoRuntimeBaseClass;
import info.scce.cinco.product.fp.pcconfig.mb.mgl.mainboard.CPUNode;
import info.scce.cinco.product.fp.pcconfig.mb.mgl.mainboard.GPUNode;
import info.scce.cinco.product.fp.pcconfig.mb.mgl.mainboard.Mainboard;
import info.scce.cinco.product.fp.pcconfig.mb.mgl.mainboard.MainboardContainer;
import info.scce.cinco.product.fp.pcconfig.mb.mgl.mainboard.RAMNode;
import info.scce.cinco.product.fp.pcconfig.mb.mgl.mainboard.RAMSlot;
import info.scce.cinco.product.fp.pcconfig.pc.mgl.pc.CaseContainer;
import info.scce.cinco.product.fp.pcconfig.pc.mgl.pc.DriveNode;
import info.scce.cinco.product.fp.pcconfig.pc.mgl.pc.MainboardNode;
import info.scce.cinco.product.fp.pcconfig.pc.mgl.pc.PC;
import info.scce.cinco.product.fp.pcconfig.pc.mgl.pc.PCMainboardContainer;
import info.scce.cinco.product.fp.pcconfig.pc.mgl.pc.PSUNode;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;

@SuppressWarnings("all")
public class PCHTML extends CincoRuntimeBaseClass implements IGenerator<PC> {
  private String fileName;
  
  private float totalPrice = 0.0f;
  
  @Override
  public void generate(final PC model, final IPath path, final IProgressMonitor arg2) {
    final String fullFileName = this._workspaceExtension.getFile(model).getName();
    this.fileName = fullFileName.substring(0, fullFileName.lastIndexOf("."));
    final IFile targetFile = this._workspaceExtension.getWorkspaceRoot().getFileForLocation(path.append((this.fileName + ".html")));
    EclipseFileUtils.writeToFile(targetFile, this.template(model));
  }
  
  private void calculate_totalPrice(final CaseContainer caseContainer) {
    this.totalPrice = 0;
    final PCMainboardContainer mbContaniner = caseContainer.getPCMainboardContainers().get(0);
    EList<MainboardNode> _mainboardNodes = mbContaniner.getMainboardNodes();
    for (final MainboardNode mainBoard : _mainboardNodes) {
      {
        final Mainboard referencedMBModel = mainBoard.getReferencedMB();
        final MainboardContainer referencedMBContainer = referencedMBModel.getMainboardContainers().get(0);
        float _talPrice = this.totalPrice;
        float _price = referencedMBContainer.getPrice();
        this.totalPrice = (_talPrice + _price);
        float _talPrice_1 = this.totalPrice;
        float _casePrice = caseContainer.getCasePrice();
        this.totalPrice = (_talPrice_1 + _casePrice);
        final Consumer<PSUNode> _function = (PSUNode it) -> {
          float _talPrice_2 = this.totalPrice;
          float _psuPrice = it.getPsuPrice();
          this.totalPrice = (_talPrice_2 + _psuPrice);
        };
        caseContainer.getPSUContainers().get(0).getPSUNodes().forEach(_function);
        final Consumer<CPUNode> _function_1 = (CPUNode it) -> {
          int _powerConsumption = it.getPowerConsumption();
          float _plus = (this.totalPrice + _powerConsumption);
          this.totalPrice = _plus;
        };
        referencedMBContainer.getCPUSlots().get(0).getCPUNodes().forEach(_function_1);
        final Consumer<GPUNode> _function_2 = (GPUNode it) -> {
          float _price_1 = it.getPrice();
          float _plus = (this.totalPrice + _price_1);
          this.totalPrice = _plus;
        };
        referencedMBContainer.getGPUSlots().get(0).getGPUNodes().forEach(_function_2);
        final Consumer<RAMSlot> _function_3 = (RAMSlot it) -> {
          boolean _isEmpty = it.getRAMNodes().isEmpty();
          boolean _not = (!_isEmpty);
          if (_not) {
            float _price_1 = it.getRAMNodes().get(0).getPrice();
            float _plus = (this.totalPrice + _price_1);
            this.totalPrice = _plus;
          }
        };
        referencedMBContainer.getRAMSlots().forEach(_function_3);
        final Consumer<DriveNode> _function_4 = (DriveNode it) -> {
          float _drivePrice = it.getDrivePrice();
          float _plus = (this.totalPrice + _drivePrice);
          this.totalPrice = _plus;
        };
        caseContainer.getDriveContainers().get(0).getDriveNodes().forEach(_function_4);
      }
    }
  }
  
  private String template(final PC model) {
    EList<CaseContainer> _caseContainers = model.getCaseContainers();
    for (final CaseContainer caseContainer : _caseContainers) {
      {
        final EList<PCMainboardContainer> referencedMBContainer = caseContainer.getPCMainboardContainers();
        boolean _isEmpty = referencedMBContainer.get(0).getMainboardNodes().isEmpty();
        if (_isEmpty) {
          throw new IllegalArgumentException("Please finish Modeling PC and install Main board model.");
        }
        final MainboardNode mainboardNode = referencedMBContainer.get(0).getMainboardNodes().get(0);
        this.calculate_totalPrice(caseContainer);
        return this.to_html(caseContainer, mainboardNode);
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    String _html_head = this.html_head();
    _builder.append(_html_head);
    _builder.newLineIfNotEmpty();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("<h1 id=\"page-title\">PC Model Details</h1>");
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html> ");
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    return _builder.toString();
  }
  
  private String to_html(final CaseContainer caseContainer, final MainboardNode mainboardNode) {
    final Mainboard referencedMBModel = mainboardNode.getReferencedMB();
    final MainboardContainer referencedMBContainer = referencedMBModel.getMainboardContainers().get(0);
    final CPUNode cpu = referencedMBContainer.getCPUSlots().get(0).getCPUNodes().get(0);
    final GPUNode gpu = referencedMBContainer.getGPUSlots().get(0).getGPUNodes().get(0);
    final Function1<RAMSlot, RAMNode> _function = (RAMSlot it) -> {
      RAMNode _xifexpression = null;
      boolean _isEmpty = it.getRAMNodes().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        _xifexpression = it.getRAMNodes().get(0);
      } else {
        _xifexpression = null;
      }
      return _xifexpression;
    };
    final List<RAMNode> rams = ListExtensions.<RAMSlot, RAMNode>map(referencedMBContainer.getRAMSlots(), _function);
    final EList<DriveNode> drives = caseContainer.getDriveContainers().get(0).getDriveNodes();
    PSUNode psu = null;
    boolean _isEmpty = caseContainer.getPSUContainers().get(0).getPSUNodes().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      psu = caseContainer.getPSUContainers().get(0).getPSUNodes().get(0);
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    String _html_head = this.html_head();
    _builder.append(_html_head);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<h1 id=\"page-title\">PC Model Details</h1>");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<div id=\"total-price-container\">");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<h2>Total price</h2>");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("<p id=\"total-price\"> ");
    _builder.append(this.totalPrice, "       ");
    _builder.append("</p>");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("</div>       ");
    _builder.newLine();
    String _mainboard_to_html = this.mainboard_to_html(referencedMBContainer, cpu, gpu, rams);
    _builder.append(_mainboard_to_html);
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    String _pc_to_html = this.pc_to_html(caseContainer, psu, drives);
    _builder.append(_pc_to_html, "\t    ");
    _builder.newLineIfNotEmpty();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html> ");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  private String html_head() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("<title>Mainboard Details</title>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("body {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("font-family: Arial, sans-serif;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("margin: 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("padding: 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("background-color: #f4f4f4;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("color: #333;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(".component {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("background-color: #fff;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("border: 1px solid #ddd;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("border-radius: 4px;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("padding: 20px;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("margin: 20px;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("box-shadow: 0 2px 4px rgba(0,0,0,0.1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(".component h2 {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("color: #444;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(".component ul {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("list-style-type: none;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("padding: 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(".component li {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("margin-bottom: 10px;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("table {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("width: 100%;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border-collapse: collapse;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-bottom: 20px;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border: 2px solid #4D4D4D;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("th, td {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("padding: 8px;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("text-align: left;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border-bottom: 1px solid #4D4D4D; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("th {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("background-color: #4CAF50;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("color: white;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tr:nth-child(even) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("background-color: #f2f2f2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("tr:hover {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("background-color: #ddd;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("td, th {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border-left: 1px solid #4D4D4D;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("th:first-child, td:first-child {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border-left: none;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#page-title {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("color: #2F4F4F; ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("font-size: 36px; ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-bottom: 30px; ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("padding: 10px;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border-bottom: 2px solid #4D4D4D; ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("max-width: 70%;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-left: auto;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-right: auto;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#total-price-container {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("background-color: #ffffff; /* Weißer Hintergrund für Kontrast */");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("padding: 20px;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-top: 30px;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("border-radius: 10px; /* Abgerundete Ecken */");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); /* Schatten für Tiefe */");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("width: 50%;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-left: auto;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-right: auto;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#total-price-container h2 {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin: 0;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("color: #2F4F4F;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("font-size: 24px;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("#total-price {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("color: #E85D04; /* Lebendige Farbe für den Preis */");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("font-size: 23px;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("font-weight: bold;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("margin-top: 20px;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  private String mainboard_to_html(final MainboardContainer mbcontainer, final CPUNode cpu, final GPUNode gpu, final List<RAMNode> rams) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Mainboard</h2>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<table> ");
    _builder.newLine();
    _builder.append("            ");
    String _html_mainboard = this.html_mainboard(mbcontainer);
    _builder.append(_html_mainboard, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</table> ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>CPU</h2>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<table> ");
    _builder.newLine();
    _builder.append("            ");
    String _html_cpu = this.html_cpu(cpu);
    _builder.append(_html_cpu, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</table> ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>GPU</h2>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<table> ");
    _builder.newLine();
    _builder.append("            ");
    String _html_gpu = this.html_gpu(gpu);
    _builder.append(_html_gpu, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</table> ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>RAMs</h2>");
    _builder.newLine();
    _builder.newLine();
    {
      for(final RAMNode ram : rams) {
        {
          boolean _notEquals = this._graphModelExtension.operator_notEquals(ram, null);
          if (_notEquals) {
            _builder.append("<div class=\"component\">");
            _builder.newLine();
            _builder.append("   ");
            _builder.append("<h3>RAM</h3>");
            _builder.newLine();
            _builder.append("   \t ");
            _builder.append("<table>");
            String _html_ram = this.html_ram(ram);
            _builder.append(_html_ram, "   \t ");
            _builder.append("</table>\t\t          \t ");
            _builder.newLineIfNotEmpty();
            _builder.append("</div>");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("</div>");
    return _builder.toString();
  }
  
  private String pc_to_html(final CaseContainer caseContainer, final PSUNode psu, final List<DriveNode> driveNodes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Case</h2>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<table> ");
    _builder.newLine();
    _builder.append("            ");
    String _html_case = this.html_case(caseContainer);
    _builder.append(_html_case, "            ");
    _builder.append(" ");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</table> ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>PSU</h2>");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("<table> ");
    _builder.newLine();
    _builder.append("            ");
    String _html_psu = this.html_psu(psu);
    _builder.append(_html_psu, "            ");
    _builder.newLineIfNotEmpty();
    _builder.append("         ");
    _builder.append("</table> ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<div class=\"component\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<h2>Drives</h2>");
    _builder.newLine();
    _builder.newLine();
    {
      for(final DriveNode drive : driveNodes) {
        _builder.newLine();
        _builder.append("<div class=\"component\">");
        _builder.newLine();
        _builder.append("   ");
        _builder.append("<h3>Hard Drive</h3>");
        _builder.newLine();
        _builder.append("   \t ");
        _builder.append("<table>");
        String _html_drive = this.html_drive(drive);
        _builder.append(_html_drive, "   \t ");
        _builder.append("</table>\t\t          \t ");
        _builder.newLineIfNotEmpty();
        _builder.append("</div>");
        _builder.newLine();
        _builder.newLine();
      }
    }
    _builder.append("</div>");
    return _builder.toString();
  }
  
  private String html_mainboard(final MainboardContainer mbContainer) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr><td>Name </td><td>");
    String _name = mbContainer.getName();
    _builder.append(_name);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Socket </td><td>");
    String _socket = mbContainer.getSocket();
    _builder.append(_socket);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Chipset: </td><td>");
    String _chipset = mbContainer.getChipset();
    _builder.append(_chipset);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Type Memory Slots </td><td>");
    String _typeMemorySlots = mbContainer.getTypeMemorySlots();
    _builder.append(_typeMemorySlots);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Number of Memory Slots </td><td>");
    int _numMemorySlots = mbContainer.getNumMemorySlots();
    _builder.append(_numMemorySlots);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Number of PCIe x16 Slots </td><td>");
    int _numPCIe16Slots = mbContainer.getNumPCIe16Slots();
    _builder.append(_numPCIe16Slots);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Number of Sata Ports </td><td>");
    int _numSataPorts = mbContainer.getNumSataPorts();
    _builder.append(_numSataPorts);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Power consumption </td><td>");
    int _powerConsumption = mbContainer.getPowerConsumption();
    _builder.append(_powerConsumption);
    _builder.append(" Watt</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>Factor </td><td>");
    String _formFactor = mbContainer.getFormFactor();
    _builder.append(_formFactor);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td>price: </td><td>");
    float _price = mbContainer.getPrice();
    _builder.append(_price);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private String html_cpu(final CPUNode cpu) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr><td> Name </td><td>");
    String _name = cpu.getName();
    _builder.append(_name);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Type </td><td>");
    String _cpuType = cpu.getCpuType();
    _builder.append(_cpuType);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Power Consumption </td><td>");
    int _powerConsumption = cpu.getPowerConsumption();
    _builder.append(_powerConsumption);
    _builder.append(" Watt</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Socket </td><td>");
    String _socket = cpu.getSocket();
    _builder.append(_socket);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> price </td><td>");
    float _price = cpu.getPrice();
    _builder.append(_price);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private String html_gpu(final GPUNode gpu) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr><td> Name </td><td>");
    String _name = gpu.getName();
    _builder.append(_name);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Chip </td><td>");
    String _chip = gpu.getChip();
    _builder.append(_chip);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Memory </td><td>");
    int _memory = gpu.getMemory();
    _builder.append(_memory);
    _builder.append(" GB</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Power consumption </td><td>");
    int _powerConsumption = gpu.getPowerConsumption();
    _builder.append(_powerConsumption);
    _builder.append(" Watt</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr><td> Price </td><td>");
    float _price = gpu.getPrice();
    _builder.append(_price);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private String html_ram(final RAMNode ram) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr> <td> Name </td> <td> ");
    String _name = ram.getName();
    _builder.append(_name);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Type </td><td>");
    String _ramType = ram.getRamType();
    _builder.append(_ramType);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Capacity </td><td>");
    int _capacity = ram.getCapacity();
    _builder.append(_capacity);
    _builder.append(" GB</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td>Power consumption </td> <td>");
    int _powerConsumption = ram.getPowerConsumption();
    _builder.append(_powerConsumption);
    _builder.append(" Watt</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Price </td> <td>");
    float _price = ram.getPrice();
    _builder.append(_price);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private String html_case(final CaseContainer caseContainer) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr> <td> Name </td> <td> ");
    String _caseName = caseContainer.getCaseName();
    _builder.append(_caseName);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Type </td><td>");
    String _caseFormFactor = caseContainer.getCaseFormFactor();
    _builder.append(_caseFormFactor);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Internal Slots </td><td>");
    int _caseInternalSlots = caseContainer.getCaseInternalSlots();
    _builder.append(_caseInternalSlots);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> External Slots </td><td>");
    int _caseInternalSlots_1 = caseContainer.getCaseInternalSlots();
    _builder.append(_caseInternalSlots_1);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Price </td> <td>");
    float _casePrice = caseContainer.getCasePrice();
    _builder.append(_casePrice);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private String html_psu(final PSUNode psu) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr> <td> Name </td> <td> ");
    String _psuName = psu.getPsuName();
    _builder.append(_psuName);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Power </td><td>");
    int _psuPower = psu.getPsuPower();
    _builder.append(_psuPower);
    _builder.append(" Watt</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Price </td><td>");
    float _psuPrice = psu.getPsuPrice();
    _builder.append(_psuPrice);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  private String html_drive(final DriveNode drive) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<tr> <td> Name </td> <td> ");
    String _driveName = drive.getDriveName();
    _builder.append(_driveName);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Type </td><td>");
    String _driveType = drive.getDriveType();
    _builder.append(_driveType);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Description </td><td>");
    String _driveDescription = drive.getDriveDescription();
    _builder.append(_driveDescription);
    _builder.append("</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Power consumption </td> <td>");
    int _drivePowerConsumption = drive.getDrivePowerConsumption();
    _builder.append(_drivePowerConsumption);
    _builder.append(" Watt</td></tr>");
    _builder.newLineIfNotEmpty();
    _builder.append("<tr> <td> Price </td> <td>");
    float _drivePrice = drive.getDrivePrice();
    _builder.append(_drivePrice);
    _builder.append(" Euro</td></tr>");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
}
