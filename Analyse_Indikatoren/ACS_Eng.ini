// @version=5
//
////

strategy("Adaptive Confluence & Market Structure Engine", "ACSE", overlay=true, 
     initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=5, 
     commission_type=strategy.commission.percent, commission_value=0.075, slippage=1, 
     pyramiding=0)

// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [1] INPUTS (SEHR UMFANGREICH)
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

// --- Backtest & Sizing ---
g_backtest = "1. Backtest Configuration"
i_start_time = input.timestamp("01 Jan 2020 00:00 +0000", "Start Time", group=g_backtest)
i_end_time = input.timestamp("31 Dec 2025 23:59 +0000", "End Time", group=g_backtest)
i_trade_direction = input.string("Both", "Trade Direction", options=["Long Only", "Short Only", "Both"], group=g_backtest)

// --- Confluence Entry System ---
g_confluence = "2. Confluence Entry System"
i_conf_required = input.int(3, "Required Confluence Signals for Entry", minval=1, maxval=5, group=g_confluence, tooltip="How many of the below conditions must be true to trigger a trade?")

// Condition 1: MA Trend Cross
i_conf_ma_enabled = input.bool(true, "CONF 1: Enable MA Trend Filter", group=g_confluence, inline="c1")
i_ma_fast_len = input.int(21, "Fast MA Length", group=g_confluence, inline="c1_ma")
i_ma_slow_len = input.int(55, "Slow MA Length", group=g_confluence, inline="c1_ma")
i_ma_type = input.string("EMA", "MA Type", options=["SMA", "EMA", "WMA", "HMA"], group=g_confluence)

// Condition 2: RSI Momentum
i_conf_rsi_enabled = input.bool(true, "CONF 2: Enable RSI Momentum Filter", group=g_confluence, inline="c2")
i_rsi_len = input.int(14, "RSI Length", group=g_confluence, inline="c2_rsi")
i_rsi_buy_level = input.int(50, "RSI Level for Longs (must be below)", group=g_confluence, inline="c2_rsi_long")
i_rsi_sell_level = input.int(50, "RSI Level for Shorts (must be above)", group=g_confluence, inline="c2_rsi_short")

// Condition 3: ADX Trend Strength
i_conf_adx_enabled = input.bool(true, "CONF 3: Enable ADX Strength Filter", group=g_confluence, inline="c3")
i_adx_len = input.int(14, "ADX/DI Length", group=g_confluence, inline="c3_adx")
i_adx_threshold = input.int(20, "Min ADX Value for Trend", group=g_confluence, inline="c3_adx")

// Condition 4: VWAP Bias
i_conf_vwap_enabled = input.bool(true, "CONF 4: Enable VWAP Bias Filter", group=g_confluence, inline="c4")
i_vwap_anchor = input.string("Session", "VWAP Anchor Period", options=["Session", "Week", "Month"], group=g_confluence)

// Condition 5: Volatility Filter
i_conf_volatility_enabled = input.bool(false, "CONF 5: Enable Volatility Filter (ATR)", group=g_confluence, inline="c5")
i_vol_atr_len = input.int(14, "ATR Length", group=g_confluence, inline="c5_vol")
i_vol_atr_ma_len = input.int(100, "ATR MA Length", group=g_confluence, inline="c5_vol_ma")
i_vol_min_mult = input.float(0.8, "Min ATR vs MA (e.g., 0.8)", group=g_confluence, inline="c5_vol_cond")
i_vol_max_mult = input.float(3.0, "Max ATR vs MA (e.g., 3.0)", group=g_confluence, inline="c5_vol_cond")

// --- Market Structure Module (For Risk Management & Context) ---
g_structure = "3. Market Structure Module"
i_swing_lookback = input.int(15, "Swing Point Lookback", minval=3, group=g_structure)
i_ob_enabled = input.bool(true, "Detect Order Blocks", group=g_structure, inline="ob1")

// --- Risk Management (Stop Loss) ---
g_sl = "4. Risk Management: Stop Loss"
i_sl_type = input.string("Structure", "Stop Loss Type", options=["None", "Structure", "ATR", "Percentage"], group=g_sl)
i_sl_atr_len = input.int(14, "ATR Length for SL", group=g_sl, inline="sl_atr")
i_sl_atr_mult = input.float(2.0, "ATR Multiplier", group=g_sl, inline="sl_atr")
i_sl_pct = input.float(3.0, "Percentage", group=g_sl, inline="sl_pct")
i_sl_structure_buffer = input.float(0.5, "Structure Buffer (in ATRs)", group=g_sl, tooltip="Extra distance from swing point for SL, measured in ATRs.")

// --- Risk Management (Take Profit) ---
g_tp = "5. Risk Management: Take Profit"
i_tp_type = input.string("RR", "Take Profit Type", options=["None", "RR", "ATR"], group=g_tp)
i_tp_rr_ratio = input.float(2.0, "Risk/Reward Ratio", group=g_tp, inline="tp_rr")
i_tp_atr_len = input.int(14, "ATR Length for TP", group=g_tp, inline="tp_atr")
i_tp_atr_mult = input.float(4.0, "ATR Multiplier", group=g_tp, inline="tp_atr")

// --- Risk Management (Trailing Stop) ---
g_ts = "6. Risk Management: Trailing Stop"
i_ts_enabled = input.bool(true, "Enable Trailing Stop", group=g_ts)
i_ts_type = input.string("Chandelier", "Trailing Stop Type", options=["ATR", "Chandelier", "Percentage"], group=g_ts, tooltip="Chandelier Exit uses the highest high/lowest low over a period.")
i_ts_atr_len = input.int(14, "ATR Length for TS", group=g_ts, inline="ts_atr")
i_ts_atr_mult = input.float(3.0, "ATR Multiplier for TS", group=g_ts, inline="ts_atr")
i_ts_chandelier_len = input.int(22, "Chandelier Period", group=g_ts)

// --- Visuals & Dashboard ---
g_visuals = "7. Visuals & Dashboard"
i_show_ma = input.bool(true, "Show MAs", group=g_visuals, inline="v1")
i_show_vwap = input.bool(true, "Show VWAP", group=g_visuals, inline="v1")
i_show_pivots = input.bool(true, "Show Swing Points", group=g_visuals, inline="v2")
i_show_bos_choch = input.bool(true, "Show Structure Breaks", group=g_visuals, inline="v2")
i_show_obs = input.bool(true, "Show Order Blocks", group=g_visuals, inline="v3")
i_show_dashboard = input.bool(true, "Show On-Screen Dashboard", group=g_visuals)

// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [2] TYPE DEFS, HELPER FUNCTIONS, AND CORE CALCULATIONS
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

// --- Types ---
type BoxInfo
    box obj
    bool mitigated
    
// --- Generic MA Func ---
f_ma(src, len, type) =>
    switch type
        "SMA" => ta.sma(src, len)
        "EMA" => ta.ema(src, len)
        "WMA" => ta.wma(src, len)
        "HMA" => ta.hma(src, len)
        => na

// --- Confluence Indicator Calculations ---
ma_fast = f_ma(close, i_ma_fast_len, i_ma_type)
ma_slow = f_ma(close, i_ma_slow_len, i_ma_type)
rsi_val = ta.rsi(close, i_rsi_len)
[di_plus, di_minus, adx_val] = ta.dmi(i_adx_len, i_adx_len)
vwap_anchor_event = i_vwap_anchor == "Session" ? timeframe.change("D") : i_vwap_anchor == "Week" ? timeframe.change("W") : timeframe.change("M")
vwap_val = ta.vwap
atr_val = ta.atr(i_vol_atr_len)
atr_ma_val = ta.sma(atr_val, i_vol_atr_ma_len)

// --- Market Structure Calculations ---
pivot_high = ta.pivothigh(high, i_swing_lookback, i_swing_lookback)
pivot_low = ta.pivotlow(low, i_swing_lookback, i_swing_lookback)
var float last_swing_high = na
var float last_swing_low = na
if not na(pivot_high)
    last_swing_high := pivot_high
if not na(pivot_low)
    last_swing_low := pivot_low
    
// --- Order Block Detection ---
var array<BoxInfo> bull_ob_arr = array.new<BoxInfo>()
var array<BoxInfo> bear_ob_arr = array.new<BoxInfo>()
if i_show_obs
    is_bull_momentum = close > f_ma(close, 5, "SMA")
    is_bear_momentum = close < f_ma(close, 5, "SMA")
    if is_bull_momentum and not is_bull_momentum[1] and close[1] < open[1]
        b = box.new(time[1], high[1], time, low[1], border_color=na, bgcolor=color.new(color.green, 80))
        array.unshift(bull_ob_arr, BoxInfo.new(b, false))
    if is_bear_momentum and not is_bear_momentum[1] and close[1] > open[1]
        b = box.new(time[1], high[1], time, low[1], border_color=na, bgcolor=color.new(color.red, 80))
        array.unshift(bear_ob_arr, BoxInfo.new(b, false))
    // Mitigation
    for i = 0 to array.size(bull_ob_arr) - 1
        info = array.get(bull_ob_arr, i)
        if not info.mitigated and low < box.get_top(info.obj)
            info.mitigated := true
            box.set_bgcolor(info.obj, color.new(color.gray, 90))
    for i = 0 to array.size(bear_ob_arr) - 1
        info = array.get(bear_ob_arr, i)
        if not info.mitigated and high > box.get_bottom(info.obj)
            info.mitigated := true
            box.set_bgcolor(info.obj, color.new(color.gray, 90))

// --- Structure Breaks (Visual Only) ---
var float last_ph_broken = na
var float last_pl_broken = na
if ta.cross(high, last_swing_high)
    last_ph_broken := last_swing_high
if ta.cross(low, last_swing_low)
    last_pl_broken := last_swing_low

// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [3] CONFLUENCE & STRATEGY LOGIC
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

// --- Evaluate Confluence Conditions ---
long_ma_conf = ma_fast > ma_slow
short_ma_conf = ma_fast < ma_slow

long_rsi_conf = rsi_val < i_rsi_buy_level
short_rsi_conf = rsi_val > i_rsi_sell_level

long_adx_conf = adx_val > i_adx_threshold and di_plus > di_minus
short_adx_conf = adx_val > i_adx_threshold and di_minus > di_plus

long_vwap_conf = close > vwap_val
short_vwap_conf = close < vwap_val

volatility_conf = atr_val > atr_ma_val * i_vol_min_mult and atr_val < atr_ma_val * i_vol_max_mult

// --- Calculate Confluence Score ---
long_score = (i_conf_ma_enabled ? (long_ma_conf ? 1 : 0) : 0) +
             (i_conf_rsi_enabled ? (long_rsi_conf ? 1 : 0) : 0) +
             (i_conf_adx_enabled ? (long_adx_conf ? 1 : 0) : 0) +
             (i_conf_vwap_enabled ? (long_vwap_conf ? 1 : 0) : 0) +
             (i_conf_volatility_enabled ? (volatility_conf ? 1 : 0) : 0)

short_score = (i_conf_ma_enabled ? (short_ma_conf ? 1 : 0) : 0) +
              (i_conf_rsi_enabled ? (short_rsi_conf ? 1 : 0) : 0) +
              (i_conf_adx_enabled ? (short_adx_conf ? 1 : 0) : 0) +
              (i_conf_vwap_enabled ? (short_vwap_conf ? 1 : 0) : 0) +
              (i_conf_volatility_enabled ? (volatility_conf ? 1 : 0) : 0)

// --- Final Entry Conditions ---
time_in_range = time >= i_start_time and time <= i_end_time
can_long = i_trade_direction == "Long Only" or i_trade_direction == "Both"
can_short = i_trade_direction == "Short Only" or i_trade_direction == "Both"

long_entry_condition = time_in_range and can_long and (long_score >= i_conf_required)
short_entry_condition = time_in_range and can_short and (short_score >= i_conf_required)

// --- SL and TP Calculation at time of Entry ---
var float entry_price = na
var float sl_price = na
var float tp_price = na
var float risk_amount = na

sl_atr_val = ta.atr(i_sl_atr_len)

if long_entry_condition and strategy.position_size == 0
    entry_price := close
    if i_sl_type == "Structure"
        sl_price := last_swing_low - sl_atr_val * i_sl_structure_buffer
    else if i_sl_type == "ATR"
        sl_price := close - sl_atr_val * i_sl_atr_mult
    else if i_sl_type == "Percentage"
        sl_price := close * (1 - i_sl_pct / 100)
    else
        sl_price := na
        
    risk_amount := entry_price - sl_price
    
    if i_tp_type == "RR"
        tp_price := entry_price + risk_amount * i_tp_rr_ratio
    else if i_tp_type == "ATR"
        tp_price := entry_price + ta.atr(i_tp_atr_len) * i_tp_atr_mult
    else
        tp_price := na

if short_entry_condition and strategy.position_size == 0
    entry_price := close
    if i_sl_type == "Structure"
        sl_price := last_swing_high + sl_atr_val * i_sl_structure_buffer
    else if i_sl_type == "ATR"
        sl_price := close + sl_atr_val * i_sl_atr_mult
    else if i_sl_type == "Percentage"
        sl_price := close * (1 + i_sl_pct / 100)
    else
        sl_price := na
        
    risk_amount := sl_price - entry_price
    
    if i_tp_type == "RR"
        tp_price := entry_price - risk_amount * i_tp_rr_ratio
    else if i_tp_type == "ATR"
        tp_price := entry_price - ta.atr(i_tp_atr_len) * i_tp_atr_mult
    else
        tp_price := na

// --- Trailing Stop Calculation ---
var float trail_sl_price = na
ts_atr = ta.atr(i_ts_atr_len) * i_ts_atr_mult
ts_chandelier_high = ta.highest(high, i_ts_chandelier_len)
ts_chandelier_low = ta.lowest(low, i_ts_chandelier_len)

if strategy.position_size > 0
    new_trail = switch i_ts_type
        "ATR" => close - ts_atr
        "Chandelier" => ts_chandelier_high - ts_atr
        "Percentage" => close * (1 - i_sl_pct / 100)
    trail_sl_price := na(trail_sl_price) ? new_trail : math.max(trail_sl_price, new_trail)
else if strategy.position_size < 0
    new_trail = switch i_ts_type
        "ATR" => close + ts_atr
        "Chandelier" => ts_chandelier_low + ts_atr
        "Percentage" => close * (1 + i_sl_pct / 100)
    trail_sl_price := na(trail_sl_price) ? new_trail : math.min(trail_sl_price, new_trail)
else
    trail_sl_price := na
    entry_price := na
    risk_amount := na
    sl_price := na
    tp_price := na

// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [4] STRATEGY EXECUTION
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

if long_entry_condition and strategy.position_size == 0
    strategy.entry("Long", strategy.long)
    strategy.exit("Long Exit", "Long", stop=sl_price, limit=tp_price)
if short_entry_condition and strategy.position_size == 0
    strategy.entry("Short", strategy.short)
    strategy.exit("Short Exit", "Short", stop=sl_price, limit=tp_price)

// --- Trailing Stop Execution ---
if i_ts_enabled and strategy.position_size != 0
    strategy.exit("Trail Exit", stop=trail_sl_price)

// --- Exit on opposite strong signal ---
if strategy.position_size > 0 and (short_score >= i_conf_required)
    strategy.close("Long", "Exit on Opposite Signal")
if strategy.position_size < 0 and (long_score >= i_conf_required)
    strategy.close("Short", "Exit on Opposite Signal")


// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [5] VISUALIZATIONS
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

// --- MAs, VWAP, Pivots, OBs ---
p_maf = plot(i_show_ma ? ma_fast : na, "Fast MA", color=color.new(color.aqua, 0))
p_mas = plot(i_show_ma ? ma_slow : na, "Slow MA", color=color.new(color.purple, 0))
fill(p_maf, p_mas, color = ma_fast > ma_slow ? color.new(color.aqua, 85) : color.new(color.purple, 85))
plot(i_show_vwap ? vwap_val : na, "VWAP", color.yellow, 2)
plotshape(i_show_pivots ? pivot_high : na, "Swing High", shape.triangledown, location.abovebar, color.red, size=size.tiny)
plotshape(i_show_pivots ? pivot_low : na, "Swing Low", shape.triangleup, location.belowbar, color.lime, size=size.tiny)
plot(i_show_bos_choch and ta.change(last_ph_broken) ? last_ph_broken : na, "Broken High", color.new(color.gray, 50), style=plot.style_linebr, linewidth=2)
plot(i_show_bos_choch and ta.change(last_pl_broken) ? last_pl_broken : na, "Broken Low", color.new(color.gray, 50), style=plot.style_linebr, linewidth=2)
plot(i_ts_enabled and strategy.position_size != 0 ? trail_sl_price : na, "Trailing Stop", color.orange, style=plot.style_cross, linewidth=2)

// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [6] ON-SCREEN DASHBOARD
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

var table dashboard = table.new(i_show_dashboard ? (i_trade_direction == "Long Only" ? position.bottom_left : i_trade_direction == "Short Only" ? position.bottom_right : position.bottom_center) : position.bottom_center, 9, 4, bgcolor=color.new(color.black, 40), border_width=1)

f_cell(tbl, c, r, txt, is_ok) => table.cell(tbl, c, r, txt, text_color=color.white, bgcolor=is_ok ? color.new(color.green, 70) : color.new(color.red, 70))
f_sym(is_ok) => is_ok ? "✓ " : "✗ "

if i_show_dashboard and barstate.islast
    table.clear(dashboard)
    // Long Conditions
    table.cell(dashboard, 0, 0, "Long Confluence", text_color=color.white, bgcolor=color.gray)
    table.cell(dashboard, 1, 0, f_sym(long_score >= i_conf_required) + str.tostring(long_score) + "/" + str.tostring(i_conf_required), text_color=color.white, bgcolor=color.new(color.gray, 50))
    if i_conf_ma_enabled
        f_cell(dashboard, 0, 1, f_sym(long_ma_conf) + "MA Trend", long_ma_conf)
    if i_conf_rsi_enabled
        f_cell(dashboard, 0, 2, f_sym(long_rsi_conf) + "RSI Momentum", long_rsi_conf)
    if i_conf_adx_enabled
        f_cell(dashboard, 0, 3, f_sym(long_adx_conf) + "ADX Strength", long_adx_conf)
    if i_conf_vwap_enabled
        f_cell(dashboard, 0, 4, f_sym(long_vwap_conf) + "VWAP Bias", long_vwap_conf)
    if i_conf_volatility_enabled
        f_cell(dashboard, 0, 5, f_sym(volatility_conf) + "Volatility OK", volatility_conf)
    
    // Short Conditions
    table.cell(dashboard, 2, 0, "Short Confluence", text_color=color.white, bgcolor=color.gray)
    table.cell(dashboard, 3, 0, f_sym(short_score >= i_conf_required) + str.tostring(short_score) + "/" + str.tostring(i_conf_required), text_color=color.white, bgcolor=color.new(color.gray, 50))
    if i_conf_ma_enabled
        f_cell(dashboard, 2, 1, f_sym(short_ma_conf) + "MA Trend", short_ma_conf)
    if i_conf_rsi_enabled
        f_cell(dashboard, 2, 2, f_sym(short_rsi_conf) + "RSI Momentum", short_rsi_conf)
    if i_conf_adx_enabled
        f_cell(dashboard, 2, 3, f_sym(short_adx_conf) + "ADX Strength", short_adx_conf)
    if i_conf_vwap_enabled
        f_cell(dashboard, 2, 4, f_sym(short_vwap_conf) + "VWAP Bias", short_vwap_conf)
    if i_conf_volatility_enabled
        f_cell(dashboard, 2, 5, f_sym(volatility_conf) + "Volatility OK", volatility_conf)

    // Strategy Status
    table.cell(dashboard, 0, 7, "Total Trades:", text_align=text.align_left, text_color=color.white)
    table.cell(dashboard, 1, 7, str.tostring(strategy.closedtrades), text_align=text.align_left, text_color=color.white)
    table.cell(dashboard, 2, 7, "Win Rate:", text_align=text.align_left, text_color=color.white)
    table.cell(dashboard, 3, 7, str.tostring(strategy.wintrades / strategy.closedtrades * 100, "#.##") + "%", text_align=text.align_left, text_color=color.white)
    table.cell(dashboard, 0, 8, "Net Profit:", text_align=text.align_left, text_color=color.white)
    table.cell(dashboard, 1, 8, str.tostring(strategy.netprofit, "#.##"), text_align=text.align_left, text_color=strategy.netprofit > 0 ? color.lime:color.red)
    table.cell(dashboard, 2, 8, "Profit Factor:", text_align=text.align_left, text_color=color.white)
    table.cell(dashboard, 3, 8, str.tostring(strategy.grossprofit / strategy.grossloss, "#.##"), text_align=text.align_left, text_color=color.white)


// —————————————————————————————————————————————————————————————————————————————————————————————————————————————
// [7] ALERTS
// —————————————————————————————————————————————————————————————————————————————————————————————————————————————

alertcondition(long_entry_condition and strategy.position_size == 0, "Confluence Long Entry Signal", "Potential LONG entry signal on {{ticker}}. SL={{plot.sl_price}}, TP={{plot.tp_price}}")
alertcondition(short_entry_condition and strategy.position_size == 0, "Confluence Short Entry Signal", "Potential SHORT entry signal on {{ticker}}. SL={{plot.sl_price}}, TP={{plot.tp_price}}")
alertcondition(strategy.opentrades > strategy.opentrades[1], "Strategy Entry Filled", "Strategy position opened on {{ticker}} at price {{strategy.opentrades.entry_price(strategy.opentrades-1)}}.")
alertcondition(strategy.closedtrades > strategy.closedtrades[1], "Strategy Position Closed", "Strategy position closed on {{ticker}} with profit: {{strategy.closedtrades.profit(strategy.closedtrades-1)}}.")